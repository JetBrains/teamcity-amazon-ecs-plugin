import java.nio.file.Paths

initializeWorkspace()

buildscript {
    ext.kotlin_version = '1.4.31'
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

def localRepo = anyParamPath('TC_LOCAL_REPO')

ext {
    teamcityVersion = anyParam('teamcityVersion') ?: '2024.11'
    def correctVersion = project.hasProperty('versionNumber') && property('versionNumber') ==~ /\d+\.\d+\.\d+.*/
    versionNumber = correctVersion ? property('versionNumber') : 'SNAPSHOT-' + new Date().format('yyyyMMddHHmmss')
    projectIds = ['group': 'teamcity-aws-ecs-plugin', 'version': versionNumber]
    teamcityJavaHome = System.properties['java.home']
    amazonUtilVersion = 'release-99472-133-g49044ab'
}



allprojects {
    group = projectIds.group
    version = projectIds.version

    apply plugin: 'kotlin'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        if (localRepo) {
            maven {
                name = "local-teamcity-artifacts"
                url "file:///${localRepo}"
            }
        }
    }
}

subprojects {
    test.useTestNG()
    jar.version = null
}

apply plugin: 'io.spring.dependency-management'

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}


def anyParamPath(String... names) {
    def param = anyParam(names);
    if (param == null || param.isEmpty())
        return null
    return (Paths.get(param).isAbsolute()) ?
           Paths.get(param) : getRootDir().toPath().resolve(param)
}

def anyParam(String... names) {
    def param
    try {
        param = names.findResult {
            project.hasProperty(it) ? project.getProperty(it) : System.getProperty(it) ?: System.getenv(it) ?: null
        }
        if (param == null || param.isEmpty())
            param = null
    } finally {
        println("AnyParam: $names -> $param")
    }
    return param
}

def initializeWorkspace() {
    if (System.getProperty("idea.active") != null) {
        println "Attempt to configure workspace in IDEA"
        def coreVersionProperties = project.projectDir.toPath().parent.parent.resolve(".version.properties")
        if (coreVersionProperties.toFile().exists()) {
            def p = new Properties().tap {
                it.load(new FileInputStream(coreVersionProperties.toFile()))
            }
            p.forEach { k,v ->
                System.setProperty(k, v);
            }
        }
    }
}